7.To write a C program to implement Data Encryption Standard (DES).
#include <stdio.h>
#include <stdint.h>
uint64_t key = 0x133457799BBCDFF1; 
uint64_t plaintext = 0x0123456789BBBAEA;
int initial_permutation[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

uint32_t des_round(uint32_t data, uint32_t round_key) {
    uint32_t expanded_data = 0; 
    uint32_t substituted_data = expanded_data ^ round_key; 

    return substituted_data;
}

int main() {
    uint64_t permuted_data = 0;
    for (int i = 0; i < 64; i++) {
        int bit_pos = initial_permutation[i] - 1;
        uint64_t bit = (plaintext >> bit_pos) & 1;
        permuted_data |= (bit << (63 - i));
    }

   
    uint32_t left = permuted_data >> 32;
    uint32_t right = (uint32_t) permuted_data;

    uint32_t round_key = (uint32_t) (key >> 32); // Extract 
    uint32_t new_right = des_round(right, round_key);

   
    uint64_t ciphertext = ((uint64_t) left << 32) | new_right;

    printf("Plaintext: 0x%016llX\n", plaintext);
    printf("Ciphertext: 0x%016llX\n", ciphertext);


}
8.To write a C program to implement the RSA encryption algorithm.
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>

int x, y, n, t, i, flag;
long int e[50], d[50], temp[50], j, m[50], en[50];
char msg[100];
int prime(long int);
void encryption_key();
long int cd(long int);
void encrypt();
void decrypt();

int main()
{
  printf("\nENTER FIRST PRIME NUMBER\n");
  scanf("%d", &x);
  flag = prime(x);
  if(flag == 0)
  {
    printf("\nINVALID INPUT\n");
    exit(0);
  }
  printf("\nENTER SECOND PRIME NUMBER\n");
  scanf("%d", &y);
  flag = prime(y);
  if(flag == 0 || x == y)
  {
    printf("\nINVALID INPUT\n");
    exit(0);
  }
  printf("\nENTER MESSAGE OR STRING TO ENCRYPT\n");

  scanf("%s",msg);
  for(i = 0; msg[i] != NULL; i++)
    m[i] = msg[i];
  n = x * y;
  t = (x-1) * (y-1);
  encryption_key();
  printf("\nPOSSIBLE VALUES OF e AND d ARE\n");
  for(i = 0; i < j-1; i++)
    printf("\n%ld\t%ld", e[i], d[i]);
  encrypt();
  decrypt();
  return 0;
}
int prime(long int pr)
{
  int i;
  j = sqrt(pr);
  for(i = 2; i <= j; i++)
  {
   if(pr % i == 0)
     return 0;
  }
  return 1;
 }

//function to generate encryption key
void encryption_key()
{
  int k;
  k = 0;
  for(i = 2; i < t; i++)
  {
    if(t % i == 0)
     continue;
    flag = prime(i);
    if(flag == 1 && i != x && i != y)
    {
     e[k] = i;
     flag = cd(e[k]);
    if(flag > 0)
    {
     d[k] = flag;
     k++;
    }
   if(k == 99)
    break;
   }
 }
}
long int cd(long int a)
{
  long int k = 1;
  while(1)
  {
    k = k + t;
    if(k % a == 0)
     return(k / a);
  }
}

//function to encrypt the message
void encrypt()
{
  long int pt, ct, key = e[0], k, len;
  i = 0;
  len = strlen(msg);
  while(i != len)
  {
    pt = m[i];
    pt = pt - 96;
    k = 1;
    for(j = 0; j < key; j++)
    {
     k = k * pt;
     k = k % n;
    }
   temp[i] = k;
   ct = k + 96;
   en[i] = ct;
   i++;
  }
  en[i] = -1;
  printf("\n\nTHE ENCRYPTED MESSAGE IS\n");
  for(i = 0; en[i] != -1; i++)
    printf("%c", en[i]);
}

//function to decrypt the message
void decrypt()
{
  long int pt, ct, key = d[0], k;
  i = 0;
  while(en[i] != -1)
  {
    ct = temp[i];
    k = 1;
    for(j = 0; j < key; j++)
    {
      k = k * ct;
      k = k % n;
    }
   pt = k + 96;
   m[i] = pt;
   i++;
  }
  m[i] = -1;
  printf("\n\nTHE DECRYPTED MESSAGE IS\n");
  for(i = 0; m[i] != -1; i++)
   printf("%c", m[i]);
  printf("\n");
}

 
9.To implement the Diffie-Hellman Key Exchange algorithm using C language.

#include<stdio.h>
long int power(int a,int b,int mod)
 {
  long long int t;
  if(b==1)
  return a;
  t=power(a,b/2,mod);
  if(b%2==0)
   return (t*t)%mod;
  else
   return (((t*t)%mod)*a)%mod;
 }
 long long int calculateKey(int a,int x,int n)
 {
  return power(a,x,n);
 }
 int main()
 {
  int n,g,x,a,y,b;   
  printf("Enter the value of:\n");
  printf("n="); 
  scanf("%d",&n);
  printf("g="); 
  scanf("%d",&g);    - 
  printf("Enter the value of x for the first person : ");
  scanf("%d",&x);  
  a=power(g,x,n);    
  printf("Enter the value of y for the second person : ");
  scanf("%d",&y);  
  b=power(g,y,n);
  printf("key for the first person is : %lld\n",power(b,x,n));
  printf("key for the second person is : %lld\n",power(a,y,n));
  return 0;
 }