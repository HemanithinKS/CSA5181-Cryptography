Ex 1:To implement the simple substitution technique named Caesar cipher using C language.
sol:
Encryption

#include<stdio.h>
#include<ctype.h>

int main()
{
	char text[500],ch;
	int key;
	printf("Enter the plain text:");
	scanf("%s",&text);
	printf("\nEnter the key:");
	scanf("%d",&key);
	
	for(int i=0;text[i]!='\0';i++)
	{
		ch=text[i];
		
		if(isalnum(ch))
		{
			if(islower(ch))
			{
				ch=(ch-'a'+key)%26+'a';
		    }
			if(isupper(ch))
			{
				ch=(ch-'A'+key)%26+'A';
			}
			if(isdigit(ch))
			{
				ch=(ch-'0'+key)%10+'0';
			}
		}
		else
		{
			printf("Invalid characters");
		}
		text[i]=ch;
	}
	printf("Cypher text:%s",text);
	return 0;
}

Decrption

#include<stdio.h>
#include<ctype.h>

int main()
{
	char text[500],ch;
	int key;
	printf("Enter the Cipher text:");
	scanf("%s",&text);
	printf("\nEnter the key:");
	scanf("%d",&key);
	
	
	for(int i=0;text[i]!='\0';i++)
	{
		ch=text[i];
		
		if(isalnum(ch))
		{
			if(islower(ch))
			{
				ch=(ch-'a'-key+26)%26+'a';
		    }
			if(isupper(ch))
			{
				ch=(ch-'A'-key+26)%26+'A';
			}
			if(isdigit(ch))
			{
				ch=(ch-'0'-key+10)%10+'0';
			}
		}
		else
		{
			printf("Invalid characters");
		}
		text[i]=ch;
	}
	printf("\nPlain text:%s",text);
	return 0;
}

Ex 2: To write a C program to implement the Playfair Substitution technique.
#include <stdio.h>   
#include <stdlib.h>  
#include <string.h>  
#define SIZE 30
void toLowerCase(char plain[], int ps)
{
    int i;
    for (i = 0; i < ps; i++) {
        if (plain[i] > 64 && plain[i] < 91)
            plain[i] += 32;
    }
}
int removeSpaces(char* plain, int ps)
{
    int i, count = 0;
    for (i = 0; i < ps; i++)
        if (plain[i] != ' ')
            plain[count++] = plain[i];
    plain[count] = '\0';
    return count;
}
void generateKeyTable(char key[], int ks, char keyT[5][5])
{
    int i, j, k, flag = 0, *dicty;
    dicty = (int*)calloc(26, sizeof(int));
    for (i = 0; i < ks; i++) {
        if (key[i] != 'j')
            dicty[key[i] - 97] = 2;
    }
    dicty['j' - 97] = 1;
    i = 0;
    j = 0;
    for (k = 0; k < ks; k++) {
        if (dicty[key[k] - 97] == 2) {
            dicty[key[k] - 97] -= 1;
            keyT[i][j] = key[k];
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
    for (k = 0; k < 26; k++) {
        if (dicty[k] == 0) {
            keyT[i][j] = (char)(k + 97);
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
}
void search(char keyT[5][5], char a, char b, int arr[])
{
    int i, j;

    if (a == 'j')
        a = 'i';
    else if (b == 'j')
        b = 'i';

    for (i = 0; i < 5; i++) {

        for (j = 0; j < 5; j++) {

            if (keyT[i][j] == a) {
                arr[0] = i;
                arr[1] = j;
            }
            else if (keyT[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}
int mod5(int a) { return (a % 5); }
int prepare(char str[], int ptrs)
{
    if (ptrs % 2 != 0) {
        str[ptrs++] = 'z';
        str[ptrs] = '\0';
    }
    return ptrs;
}
void encrypt(char str[], char keyT[5][5], int ps)
{
    int i, a[4];

    for (i = 0; i < ps; i += 2) {

        search(keyT, str[i], str[i + 1], a);

        if (a[0] == a[2]) {
            str[i] = keyT[a[0]][mod5(a[1] + 1)];
            str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
        }
        else if (a[1] == a[3]) {
            str[i] = keyT[mod5(a[0] + 1)][a[1]];
            str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
        }
        else {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
}
void encryptByPlayfairCipher(char str[], char key[])
{
    char ps, ks, keyT[5][5];  
    ks = strlen(key);
    ks = removeSpaces(key, ks);
    toLowerCase(key, ks);   
    ps = strlen(str);
    toLowerCase(str, ps);
    ps = removeSpaces(str, ps);
    ps = prepare(str, ps);
    generateKeyTable(key, ks, keyT);
    encrypt(str, keyT, ps);
}
int main()
{
    char str[SIZE], key[SIZE];   
    strcpy(key, "Algorithm");
    printf("Key text: %s\n", key); 
    strcpy(str, "Programming");
    printf("Plain text: %s\n", str);  
    encryptByPlayfairCipher(str, key);
    printf("Cipher text: %s\n", str);
    return 0;
}

Ex. 3 : To write a C program to implement the hill cipher substitution techniques.
SOLN
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define SIZE 3 // Size of the matrix for 3x3 Hill Cipher

void encrypt(int keyMatrix[][SIZE], int vector[], int result[]) {
    for (int i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < SIZE; j++) {
            result[i] += keyMatrix[i][j] * vector[j];
        }
        result[i] %= 26; // Modulo 26 to keep within the range of letters
    }
}

int main() {
    int keyMatrix[SIZE][SIZE];
    printf("Enter the key matrix (3x3):\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &keyMatrix[i][j]);
        }
    }

    char plaintext[100];
    printf("Enter plaintext (uppercase letters only): ");
    scanf("%s", plaintext);

    int len = strlen(plaintext);
    int paddedLen = len;

    while (paddedLen % SIZE != 0) {
        paddedLen++;
    }

    int vector[SIZE], encryptedVector[SIZE];
    printf("Encrypted text: ");
    for (int i = 0; i < paddedLen; i += SIZE) {
        for (int j = 0; j < SIZE; j++) {
            vector[j] = (i + j < len) ? plaintext[i + j] - 'A' : 0;
        }

        encrypt(keyMatrix, vector, encryptedVector);

        for (int j = 0; j < SIZE; j++) {
            printf("%c", encryptedVector[j] + 'A');
        }
    }
    printf("\n");

    return 0;
}

Ex.4 : Write a C program for monoalphabetic substitution cipher maps a plaintext alphabet to a ciphertext 
alphabet, so that each letter of the plaintext alphabet maps to a single unique letter of the ciphertext 
alphabet.
soln:
#include<stdio.h>
#include<string.h>

int main()
{
    char plain[100], cipher[100], key[27];
    int i, j, k, len;
    printf("Enter the plain text: ");
    fgets(plain, 100, stdin);
    printf("Enter the key: ");
    fgets(key, 27, stdin);
    len = strlen(plain);
    for(i=0; i<len; i++)
    {
        if(plain[i]>='a' && plain[i]<='z')
        {
            j = plain[i] - 'a';
            cipher[i] = key[j];
        }
        else if(plain[i]>='A' && plain[i]<='Z')
        {
            j = plain[i] - 'A';
            cipher[i] = key[j];
        }
        else
        {
            cipher[i] = plain[i];
        }
    }
    printf("The cipher text is: %s", cipher);
    return 0;
}

Ex.5 :Write a C program for polyalphabetic substitution cipher(Vigenère Cipher) uses a separate monoalphabetic substitution 
cipher for each successive letter of plaintext, depending on a key.
soln
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    char msg[100]; 
    char key[100]; 
    int msgLen, keyLen, i, j;

    printf("Enter the plain text (letters and digits): ");
    scanf("%s", msg);
    printf("Enter the key: ");
    scanf("%s", key);

    msgLen = strlen(msg);
    keyLen = strlen(key);

    char newKey[msgLen], encryptedMsg[msgLen];

    
    for (i = 0, j = 0; i < msgLen; ++i, ++j) {
        if (j == keyLen)
            j = 0;
        newKey[i] = key[j];
    }
    newKey[i] = '\0';

    
    for (i = 0; i < msgLen; ++i) {
        if (isalpha(msg[i])) {
            encryptedMsg[i] = ((toupper(msg[i]) + toupper(newKey[i])) % 26) + 'A';
        } else if (isdigit(msg[i])) {
            encryptedMsg[i] = ((msg[i] - '0' + newKey[i]) % 10) + '0';
        } else {
            encryptedMsg[i] = msg[i]; 
        }
    }
    encryptedMsg[i] = '\0';

    

    printf("Original Message: %s\n", msg);
    printf("Key: %s\n", key);
    printf("New Generated Key: %s\n", newKey);
    printf("Encrypted Message: %s\n", encryptedMsg);
   

    return 0;
}

DEx.6 : To write a C program to implement the rail fence transposition technique.

soln
#include <stdio.h>
#include <string.h>

int main() {
    char str[100];
    char encrypted[100] = "";
    int depth;

    printf("Rail Fence - Encryption\n\n");

    printf("Enter Plain Text: ");
    scanf("%s", str);

    printf("Enter Depth: ");
    scanf("%d", &depth);

    int len = strlen(str);
    char rails[depth][len];
    for (int i = 0; i < depth; i++) {
        for (int j = 0; j < len; j++) {
            rails[i][j] = '\0';
        }
    }

    int dir = 1;
    int row = 0;
    for (int i = 0; i < len; i++) {
        rails[row][i] = str[i];
        row += dir;
        if (row == depth - 1 || row == 0) {
            dir *= -1;
        }
    }

    for (int i = 0; i < depth; i++) {
        for (int j = 0; j < len; j++) {
            if (rails[i][j] != '\0') {
                encrypted[strlen(encrypted)] = rails[i][j];
            }
        }
    }

    printf("Cipher Text: %s\n", encrypted);

    return 0;
}

7.To write a C program to implement Data Encryption Standard (DES).
#include <stdio.h>
#include <stdint.h>
uint64_t key = 0x133457799BBCDFF1; 
uint64_t plaintext = 0x0123456789BBBAEA;
int initial_permutation[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

uint32_t des_round(uint32_t data, uint32_t round_key) {
    uint32_t expanded_data = 0; 
    uint32_t substituted_data = expanded_data ^ round_key; 

    return substituted_data;
}

int main() {
    uint64_t permuted_data = 0;
    for (int i = 0; i < 64; i++) {
        int bit_pos = initial_permutation[i] - 1;
        uint64_t bit = (plaintext >> bit_pos) & 1;
        permuted_data |= (bit << (63 - i));
    }

   
    uint32_t left = permuted_data >> 32;
    uint32_t right = (uint32_t) permuted_data;

    uint32_t round_key = (uint32_t) (key >> 32); // Extract 
    uint32_t new_right = des_round(right, round_key);

   
    uint64_t ciphertext = ((uint64_t) left << 32) | new_right;

    printf("Plaintext: 0x%016llX\n", plaintext);
    printf("Ciphertext: 0x%016llX\n", ciphertext);


}
8.To write a C program to implement the RSA encryption algorithm.
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>

int x, y, n, t, i, flag;
long int e[50], d[50], temp[50], j, m[50], en[50];
char msg[100];
int prime(long int);
void encryption_key();
long int cd(long int);
void encrypt();
void decrypt();

int main()
{
  printf("\nENTER FIRST PRIME NUMBER\n");
  scanf("%d", &x);
  flag = prime(x);
  if(flag == 0)
  {
    printf("\nINVALID INPUT\n");
    exit(0);
  }
  printf("\nENTER SECOND PRIME NUMBER\n");
  scanf("%d", &y);
  flag = prime(y);
  if(flag == 0 || x == y)
  {
    printf("\nINVALID INPUT\n");
    exit(0);
  }
  printf("\nENTER MESSAGE OR STRING TO ENCRYPT\n");

  scanf("%s",msg);
  for(i = 0; msg[i] != NULL; i++)
    m[i] = msg[i];
  n = x * y;
  t = (x-1) * (y-1);
  encryption_key();
  printf("\nPOSSIBLE VALUES OF e AND d ARE\n");
  for(i = 0; i < j-1; i++)
    printf("\n%ld\t%ld", e[i], d[i]);
  encrypt();
  decrypt();
  return 0;
}
int prime(long int pr)
{
  int i;
  j = sqrt(pr);
  for(i = 2; i <= j; i++)
  {
   if(pr % i == 0)
     return 0;
  }
  return 1;
 }

//function to generate encryption key
void encryption_key()
{
  int k;
  k = 0;
  for(i = 2; i < t; i++)
  {
    if(t % i == 0)
     continue;
    flag = prime(i);
    if(flag == 1 && i != x && i != y)
    {
     e[k] = i;
     flag = cd(e[k]);
    if(flag > 0)
    {
     d[k] = flag;
     k++;
    }
   if(k == 99)
    break;
   }
 }
}
long int cd(long int a)
{
  long int k = 1;
  while(1)
  {
    k = k + t;
    if(k % a == 0)
     return(k / a);
  }
}

//function to encrypt the message
void encrypt()
{
  long int pt, ct, key = e[0], k, len;
  i = 0;
  len = strlen(msg);
  while(i != len)
  {
    pt = m[i];
    pt = pt - 96;
    k = 1;
    for(j = 0; j < key; j++)
    {
     k = k * pt;
     k = k % n;
    }
   temp[i] = k;
   ct = k + 96;
   en[i] = ct;
   i++;
  }
  en[i] = -1;
  printf("\n\nTHE ENCRYPTED MESSAGE IS\n");
  for(i = 0; en[i] != -1; i++)
    printf("%c", en[i]);
}

//function to decrypt the message
void decrypt()
{
  long int pt, ct, key = d[0], k;
  i = 0;
  while(en[i] != -1)
  {
    ct = temp[i];
    k = 1;
    for(j = 0; j < key; j++)
    {
      k = k * ct;
      k = k % n;
    }
   pt = k + 96;
   m[i] = pt;
   i++;
  }
  m[i] = -1;
  printf("\n\nTHE DECRYPTED MESSAGE IS\n");
  for(i = 0; m[i] != -1; i++)
   printf("%c", m[i]);
  printf("\n");
}

 
9.To implement the Diffie-Hellman Key Exchange algorithm using C language.

#include<stdio.h>
long int power(int a,int b,int mod)
 {
  long long int t;
  if(b==1)
  return a;
  t=power(a,b/2,mod);
  if(b%2==0)
   return (t*t)%mod;
  else
   return (((t*t)%mod)*a)%mod;
 }
 long long int calculateKey(int a,int x,int n)
 {
  return power(a,x,n);
 }
 int main()
 {
  int n,g,x,a,y,b;   
  printf("Enter the value of:\n");
  printf("n="); 
  scanf("%d",&n);
  printf("g="); 
  scanf("%d",&g);    - 
  printf("Enter the value of x for the first person : ");
  scanf("%d",&x);  
  a=power(g,x,n);    
  printf("Enter the value of y for the second person : ");
  scanf("%d",&y);  
  b=power(g,y,n);
  printf("key for the first person is : %lld\n",power(b,x,n));
  printf("key for the second person is : %lld\n",power(a,y,n));
  return 0;
 }
