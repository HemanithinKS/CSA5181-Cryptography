Ex 1:To implement the simple substitution technique named Caesar cipher using C language.
sol:
Encryption

#include<stdio.h>
#include<ctype.h>

int main()
{
	char text[500],ch;
	int key;
	printf("Enter the plain text:");
	scanf("%s",&text);
	printf("\nEnter the key:");
	scanf("%d",&key);
	
	for(int i=0;text[i]!='\0';i++)
	{
		ch=text[i];
		
		if(isalnum(ch))
		{
			if(islower(ch))
			{
				ch=(ch-'a'+key)%26+'a';
		    }
			if(isupper(ch))
			{
				ch=(ch-'A'+key)%26+'A';
			}
			if(isdigit(ch))
			{
				ch=(ch-'0'+key)%10+'0';
			}
		}
		else
		{
			printf("Invalid characters");
		}
		text[i]=ch;
	}
	printf("Cypher text:%s",text);
	return 0;
}

Decrption

#include<stdio.h>
#include<ctype.h>

int main()
{
	char text[500],ch;
	int key;
	printf("Enter the Cipher text:");
	scanf("%s",&text);
	printf("\nEnter the key:");
	scanf("%d",&key);
	
	
	for(int i=0;text[i]!='\0';i++)
	{
		ch=text[i];
		
		if(isalnum(ch))
		{
			if(islower(ch))
			{
				ch=(ch-'a'-key+26)%26+'a';
		    }
			if(isupper(ch))
			{
				ch=(ch-'A'-key+26)%26+'A';
			}
			if(isdigit(ch))
			{
				ch=(ch-'0'-key+10)%10+'0';
			}
		}
		else
		{
			printf("Invalid characters");
		}
		text[i]=ch;
	}
	printf("\nPlain text:%s",text);
	return 0;
}

Ex 2: To write a C program to implement the Playfair Substitution technique.
#include <stdio.h>   
#include <stdlib.h>  
#include <string.h>  
#define SIZE 30
void toLowerCase(char plain[], int ps)
{
    int i;
    for (i = 0; i < ps; i++) {
        if (plain[i] > 64 && plain[i] < 91)
            plain[i] += 32;
    }
}
int removeSpaces(char* plain, int ps)
{
    int i, count = 0;
    for (i = 0; i < ps; i++)
        if (plain[i] != ' ')
            plain[count++] = plain[i];
    plain[count] = '\0';
    return count;
}
void generateKeyTable(char key[], int ks, char keyT[5][5])
{
    int i, j, k, flag = 0, *dicty;
    dicty = (int*)calloc(26, sizeof(int));
    for (i = 0; i < ks; i++) {
        if (key[i] != 'j')
            dicty[key[i] - 97] = 2;
    }
    dicty['j' - 97] = 1;
    i = 0;
    j = 0;
    for (k = 0; k < ks; k++) {
        if (dicty[key[k] - 97] == 2) {
            dicty[key[k] - 97] -= 1;
            keyT[i][j] = key[k];
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
    for (k = 0; k < 26; k++) {
        if (dicty[k] == 0) {
            keyT[i][j] = (char)(k + 97);
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
}
void search(char keyT[5][5], char a, char b, int arr[])
{
    int i, j;

    if (a == 'j')
        a = 'i';
    else if (b == 'j')
        b = 'i';

    for (i = 0; i < 5; i++) {

        for (j = 0; j < 5; j++) {

            if (keyT[i][j] == a) {
                arr[0] = i;
                arr[1] = j;
            }
            else if (keyT[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}
int mod5(int a) { return (a % 5); }
int prepare(char str[], int ptrs)
{
    if (ptrs % 2 != 0) {
        str[ptrs++] = 'z';
        str[ptrs] = '\0';
    }
    return ptrs;
}
void encrypt(char str[], char keyT[5][5], int ps)
{
    int i, a[4];

    for (i = 0; i < ps; i += 2) {

        search(keyT, str[i], str[i + 1], a);

        if (a[0] == a[2]) {
            str[i] = keyT[a[0]][mod5(a[1] + 1)];
            str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
        }
        else if (a[1] == a[3]) {
            str[i] = keyT[mod5(a[0] + 1)][a[1]];
            str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
        }
        else {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
}
void encryptByPlayfairCipher(char str[], char key[])
{
    char ps, ks, keyT[5][5];  
    ks = strlen(key);
    ks = removeSpaces(key, ks);
    toLowerCase(key, ks);   
    ps = strlen(str);
    toLowerCase(str, ps);
    ps = removeSpaces(str, ps);
    ps = prepare(str, ps);
    generateKeyTable(key, ks, keyT);
    encrypt(str, keyT, ps);
}
int main()
{
    char str[SIZE], key[SIZE];   
    strcpy(key, "Algorithm");
    printf("Key text: %s\n", key); 
    strcpy(str, "Programming");
    printf("Plain text: %s\n", str);  
    encryptByPlayfairCipher(str, key);
    printf("Cipher text: %s\n", str);
    return 0;
}

Ex. 3 : To write a C program to implement the hill cipher substitution techniques.
SOLN
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define SIZE 3 // Size of the matrix for 3x3 Hill Cipher

void encrypt(int keyMatrix[][SIZE], int vector[], int result[]) {
    for (int i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < SIZE; j++) {
            result[i] += keyMatrix[i][j] * vector[j];
        }
        result[i] %= 26; // Modulo 26 to keep within the range of letters
    }
}

int main() {
    int keyMatrix[SIZE][SIZE];
    printf("Enter the key matrix (3x3):\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &keyMatrix[i][j]);
        }
    }

    char plaintext[100];
    printf("Enter plaintext (uppercase letters only): ");
    scanf("%s", plaintext);

    int len = strlen(plaintext);
    int paddedLen = len;

    while (paddedLen % SIZE != 0) {
        paddedLen++;
    }

    int vector[SIZE], encryptedVector[SIZE];
    printf("Encrypted text: ");
    for (int i = 0; i < paddedLen; i += SIZE) {
        for (int j = 0; j < SIZE; j++) {
            vector[j] = (i + j < len) ? plaintext[i + j] - 'A' : 0;
        }

        encrypt(keyMatrix, vector, encryptedVector);

        for (int j = 0; j < SIZE; j++) {
            printf("%c", encryptedVector[j] + 'A');
        }
    }
    printf("\n");

    return 0;
}

Ex.4 : Write a C program for monoalphabetic substitution cipher maps a plaintext alphabet to a ciphertext 
alphabet, so that each letter of the plaintext alphabet maps to a single unique letter of the ciphertext 
alphabet.
soln:
#include<stdio.h>
#include<string.h>

int main()
{
    char plain[100], cipher[100], key[27];
    int i, j, k, len;
    printf("Enter the plain text: ");
    fgets(plain, 100, stdin);
    printf("Enter the key: ");
    fgets(key, 27, stdin);
    len = strlen(plain);
    for(i=0; i<len; i++)
    {
        if(plain[i]>='a' && plain[i]<='z')
        {
            j = plain[i] - 'a';
            cipher[i] = key[j];
        }
        else if(plain[i]>='A' && plain[i]<='Z')
        {
            j = plain[i] - 'A';
            cipher[i] = key[j];
        }
        else
        {
            cipher[i] = plain[i];
        }
    }
    printf("The cipher text is: %s", cipher);
    return 0;
}

Ex.5 :Write a C program for polyalphabetic substitution cipher(Vigenère Cipher) uses a separate monoalphabetic substitution 
cipher for each successive letter of plaintext, depending on a key.
DEx.6 : To write a C program to implement the rail fence transposition technique.
